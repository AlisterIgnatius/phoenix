schema {
  query: Query
}

type Query {
  page(id: String, name: PageNameInput): Page
  node(id: String, name: NodeNameInput): Node
  nodes(relatedTo: String): [Node]!
}

input PageNameInput {
  # Authority is the complete hostname of the wiki (e.g. simple.wikipedia.org)
  authority: String!
  name: String!
}

input NodeNameInput {
  # Authority is the complete hostname of the wiki (e.g. simple.wikipedia.org)
  authority: String!
  pageName: String!
  name: String!
}

type Page {
  id: ID!
  name: String!
  url: String!
  dateModified: String!
  hasPart(limit: Int, offset: Int): [Node]!
  # We had this as an associative array, (which GraphQL doesn't support); This
  # gets us close, but we should rethink.
  about(key: String): [Tuple!]!
}

type Node {
  id: ID!
  name: String!
  isPartOf: [Page]!
  dateModified: String!
  unsafe: String!
  keywords(limit: Int, offset: Int): [RelatedTopic]!
}

type Tuple {
  key: String!
  val: String!
}

type RelatedTopic {
  id: ID!
  salience: Float!
}
